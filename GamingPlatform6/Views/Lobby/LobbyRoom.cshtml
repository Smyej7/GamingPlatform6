@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedResource> StringLocalizer

@model GamingPlatform6.Models.Lobby

@{
    ViewData["Title"] = @StringLocalizer["Lobby"];
    var userName = Context.Request.Cookies["username"];  // Récupérer le nom d'utilisateur depuis le cookie
}

<!DOCTYPE html>
<html>
<head>
    <title>@ViewData["Title"]</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.4/signalr.min.js"></script>
    <style>
        .board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 5px;
        }
        .cell {
            width: 100px;
            height: 100px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2em;
            border: 1px solid black;
            cursor: pointer;
        }
        .cell.taken {
            pointer-events: none;
        }
    </style>
</head>
<body>
    @* <h2>Lobby : @Model.LobbyId</h2> *@
    <p>@StringLocalizer["Host"] : @Model.HostUserId</p>

    <div id="messagesList"></div>
    <div>
        <strong>@StringLocalizer["ConnectedPlayers"]: </strong><span id="onlineCount">0</span>
    </div>

    <!-- Message d'erreur pour informer si le lobby est complet -->
    <div id="errorMessage" style="color: red; display: none;">
        <p>@StringLocalizer["LobbyFull"]</p>
    </div>

    <!-- Grille de jeu -->
    <div id="gameBoard" class="board"></div>
    
    <script>
                                            //Board logique 
        const lobbyId = "@Model.LobbyId";
        const userName = "@userName";

        // Se connecter au hub SignalR
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/lobbyHub?lobbyId=" + lobbyId)  // Utiliser l'ID du lobby
            .build();

        // Effectuer un mouvement
        function makeMove(row, col) {
            connection.invoke("MakeMove", lobbyId, row, col)
                .catch(err => console.error(err.toString()));
        }

        // Mettre à jour la grille
        connection.on("UpdateBoard", (board) => {
            const cells = document.querySelectorAll(".cell");
            cells.forEach(cell => {
                const row = cell.dataset.row;
                const col = cell.dataset.col;
                const value = board[row][col];
                cell.textContent = value;
                if (value) {
                    cell.classList.add("taken");
                }
            });
        });

        // Afficher les messages de fin de jeu
        connection.on("GameOver", (message) => {
            alert(message);
            window.location.href = '/Lobby/CreateLobby';
        });

        // Afficher les erreurs
        connection.on("ErrorMessage", (message) => {
            alert(message);
        });
        
                                            //Lobby logique

        // Recevoir les messages
        connection.on("ReceiveMessage", (user, message) => {
            const msg = document.createElement("div");
            msg.textContent = `${user}: ${message}`;
            document.getElementById("messagesList").appendChild(msg);

            // Vérifier si le message indique que le lobby est complet
            if (message.includes("*C1*-")) {
                // Afficher le message d'erreur
                // document.getElementById("errorMessage").style.display = "block";

                window.location.href = "/Lobby/Full";
            }
        });
        
        // Recevoir le nombre de personnes en ligne
        connection.on("UpdateOnlineCount", (count) => {
            document.getElementById("onlineCount").textContent = count;
        });

        // Démarrer la connexion
        connection.start().then(() => {
            connection.invoke("JoinLobby", lobbyId, userName)
                .catch(err => console.error(err.toString()));
            initializeBoard(); // Initialiser la grille une fois connecté
        }).catch(err => console.error(err.toString()));
    </script>

    @* Initialiser la grille *@
    <script>
        function initializeBoard() {
            const board = document.getElementById("gameBoard");
            board.innerHTML = "";
            for (let row = 0; row < 3; row++) {
                for (let col = 0; col < 3; col++) {
                    const cell = document.createElement("div");
                    cell.classList.add("cell");
                    cell.dataset.row = row;
                    cell.dataset.col = col;
                    cell.addEventListener("click", () => {
                        if (document.getElementById("onlineCount").textContent < 2) {
                            alert('@StringLocalizer["WaitingForOpponent"]');
                        }
                        else {
                            makeMove(row, col)
                        }
                    });
                    board.appendChild(cell);
                }
            }
        }

        document.addEventListener("DOMContentLoaded", function() {
            const myElement = document.getElementById("gameBoard");
            if (myElement) {
                initializeBoard();
            } else {
                console.log("Element non trouvé.");
            }
        });
    </script>

</body>
</html>